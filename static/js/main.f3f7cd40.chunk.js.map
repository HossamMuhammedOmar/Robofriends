{"version":3,"sources":["Component/Card.js","Component/CardList.js","robot.js","Component/SearchBox.js","Component/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","filterRobo","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3f7cd40.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"card-container\">\n      <div className=\"card-image\">\n        <img alt=\"robot\" src={`https://robohash.org/${id}`}></img>\n      </div>\n      <div className=\"card-info\">\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  const cardComponent = robots.map((user, i) => {\n    return (\n      <div key={robots[i].id}>\n        <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n      </div>\n    );\n  });\n  return (\n    <div>\n      <div className=\"container\">{cardComponent}</div>\n    </div>\n  );\n};\n\nexport default CardList;\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Howell Leanne',\n    username: 'Samantha',\n    email: 'hossam@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Leanne Graham',\n    username: 'Delphine',\n    email: 'manal_omar@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Nicholas Runolfsdottir',\n    username: 'Moriah.Stanton',\n    email: 'essam.moh32@karina.biz',\n  },\n  {\n    id: 11,\n    name: 'Ralf Elzoger',\n    username: 'Ralf.Z',\n    email: 'Ralf.Zoger55@karina.biz',\n  },\n  {\n    id: 12,\n    name: 'Ralf Elzoger',\n    username: 'Ralf.Z',\n    email: 'Ralf.Zoger55@karina.biz',\n  },\n  {\n    id: 13,\n    name: 'Alla Muhammed',\n    username: 'Ralf.Z',\n    email: 'alla.mohammed@karina.biz',\n  },\n  {\n    id: 14,\n    name: 'Mohammed Omar',\n    username: 'Ralf.Z',\n    email: 'mohammed.omar55@karina.biz',\n  },\n  {\n    id: 15,\n    name: 'Mo3az Omar',\n    username: 'Ralf.Z',\n    email: 'moaaz.omar@karina.biz',\n  },\n  {\n    id: 16,\n    name: 'Ralf Elzoger',\n    username: 'Ralf.Z',\n    email: 'Ralf.Zoger55@karina.biz',\n  },\n  {\n    id: 17,\n    name: 'Ralf Elzoger',\n    username: 'Ralf.Z',\n    email: 'Ralf.Zoger55@karina.biz',\n  },\n  {\n    id: 18,\n    name: 'Alla Muhammed',\n    username: 'Ralf.Z',\n    email: 'alla.mohammed@karina.biz',\n  },\n  {\n    id: 19,\n    name: 'Mohammed Omar',\n    username: 'Ralf.Z',\n    email: 'mohammed.omar55@karina.biz',\n  },\n  {\n    id: 20,\n    name: 'Mo3az Omar',\n    username: 'Ralf.Z',\n    email: 'moaaz.omar@karina.biz',\n  },\n  {\n    id: 21,\n    name: 'alla mohammed',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 22,\n    name: 'moaz omar',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 23,\n    name: 'mohammed omar',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 24,\n    name: 'Gandalf Nicholas',\n    username: 'Delphine',\n    email: 'Nicholas_Gandalf@dana.io',\n  },\n  {\n    id: 25,\n    name: 'Nicholas Gandalf',\n    username: 'Moriah.Stanton',\n    email: 'essam.moh32@karina.biz',\n  },\n];\n","import React from 'react';\nimport './Card.css';\n\nconst SearchBox = function ({ searchChange }) {\n  return (\n    <div>\n      <input\n        className=\"search-robo\"\n        type=\"search\"\n        placeholder=\"search for robot\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = function (props) {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid #2c3e50',\n        height: '710px',\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport CardList from '../Component/CardList';\nimport { robots } from '../robot';\nimport SearchBox from '../Component/SearchBox';\nimport Scroll from '../Component/Scroll';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: robots,\n      searchfield: '',\n    };\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    const filterRobo = this.state.robots.filter((robot) => {\n      let name = robot.name.toLowerCase();\n      return name.includes(this.state.searchfield.toLowerCase());\n    });\n    return (\n      <div>\n        <div className=\"content-search\">\n          <h1>Robo Friends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n        </div>\n        <Scroll>\n          <CardList robots={filterRobo} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}